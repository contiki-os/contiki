
CONTIKI_TARGET_DIRS = .

### Include the board-specific makefile
PLATFORM_ROOT_DIR = $(CONTIKI)/platform/$(TARGET)

#Currently we support only GCC
GCC=1

CONTIKI_TARGET_DIRS += dev
CONTIKI_TARGET_DIRS += stm32cube-lib/stm32cube-prj/Src
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/stm32l1xx_nucleo
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/x_nucleo_plm01a1
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/Common
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/st7580/src stm32cube-lib/drivers/st7580/inc
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/CMSIS
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/STM32L1xx_HAL_Driver
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/STM32L1xx_HAL_Driver/Src
CONTIKI_TARGET_DIRS += stm32cube-lib/drivers/STM32L1xx_HAL_Driver/Inc


ARCH_DEV = button-sensor.c leds-arch.c

ARCH_NUCLEOST7580 = contiki-st7580-main.c  uart-msg.c  st7580.c  node-id.c

ARCH_NUCLEOST7580_STM32CUBEHAL = stm32l1xx_hal_msp.c  stm32l1xx_it.c stm32cube_hal_init.c

ARCH_DRIVERS_STM32L1xx = stm32l1xx_nucleo.c

ARCH_DRIVERS_ST7580_SHIELD = plm_gpio.c  stm32_plm01a1.c

ARCH_DRIVERS_ST7580 = ST7580_Serial.c

STM32L1XX_HAL =\
	stm32l1xx_hal.c\
	stm32l1xx_hal_adc_ex.c\
	stm32l1xx_hal_adc.c\
	stm32l1xx_hal_comp.c\
	stm32l1xx_hal_cortex.c\
	stm32l1xx_hal_crc.c\
	stm32l1xx_hal_cryp_ex.c\
	stm32l1xx_hal_cryp.c\
	stm32l1xx_hal_dac_ex.c\
	stm32l1xx_hal_dac.c\
	stm32l1xx_hal_dma.c\
	stm32l1xx_hal_flash_ex.c\
	stm32l1xx_hal_flash.c\
	stm32l1xx_hal_flash_ramfunc.c\
	stm32l1xx_hal_gpio.c\
	stm32l1xx_hal_i2c.c\
	stm32l1xx_hal_i2s.c\
	stm32l1xx_hal_irda.c\
	stm32l1xx_hal_iwdg.c\
	stm32l1xx_hal_lcd.c\
	stm32l1xx_hal_nor.c\
	stm32l1xx_hal_opamp_ex.c\
	stm32l1xx_hal_opamp.c\
	stm32l1xx_hal_pcd_ex.c\
	stm32l1xx_hal_pcd.c\
	stm32l1xx_hal_pwr_ex.c\
	stm32l1xx_hal_pwr.c\
	stm32l1xx_hal_rcc_ex.c\
	stm32l1xx_hal_rcc.c\
	stm32l1xx_hal_rtc_ex.c\
	stm32l1xx_hal_rtc.c\
	stm32l1xx_hal_sd.c\
	stm32l1xx_hal_smartcard.c\
	stm32l1xx_hal_spi_ex.c\
	stm32l1xx_hal_spi.c\
	stm32l1xx_hal_sram.c\
	stm32l1xx_hal_tim_ex.c\
	stm32l1xx_hal_tim.c\
	stm32l1xx_hal_uart.c\
	stm32l1xx_hal_usart.c\
	stm32l1xx_hal_wwdg.c\
	stm32l1xx_ll_fsmc.c\
	stm32l1xx_ll_sdmmc.c

ARCH+=$(ARCH_DEV)
ARCH+=$(ARCH_NUCLEOST7580)
ARCH+=$(ARCH_NUCLEOST7580_STM32CUBEHAL)
ARCH+=$(ARCH_DRIVERS_STM32L1xx)
ARCH+=$(ARCH_DRIVERS_ST7580_SHIELD)
ARCH+=$(ARCH_DRIVERS_ST7580)
ARCH+=$(STM32L1XX_HAL)

CFLAGS += -DUSE_STM32L152_EVAL \
		-DSTM32L152xE \
		-DUSE_STM32L1XX_NUCLEO \
		-DUSE_HAL_DRIVER \
		-DUSE_STDPERIPH_DRIVER \
		-DNO_EEPROM \

CFLAGS += -I. \
	  -I$(CONTIKI)/platform/$(TARGET)/ \
	  -I$(CONTIKI)/platform/$(TARGET)/stm32cube-lib/stm32cube-prj/Inc \
	  -I$(CONTIKI)/platform/$(TARGET)/stm32cube-lib/drivers/Common \
	  -I$(CONTIKI)/platform/$(TARGET)/stm32cube-lib/drivers/st7580/inc \
	  -I$(CONTIKI)/platform/$(TARGET)/stm32cube-lib/drivers/CMSIS \
	  -I$(CONTIKI)/platform/$(TARGET)/stm32cube-lib/drivers/STM32L1xx_HAL_Driver/Inc \
	  -I$(CONTIKI)/cpu/arm/stm32l152 \
	  -I$(CONTIKI)/core                   \
	  -I$(CONTIKI)/platform/$(TARGET)/dev

ifdef UIP_CONF_IPV6
CFLAGS += -DWITH_UIP6=1
endif


ifndef CONTIKI_TARGET_MAIN
CONTIKI_TARGET_MAIN = contiki-st7580-main.c
endif

CONTIKI_TARGET_SOURCEFILES += $(ARCH) $(CONTIKI_TARGET_MAIN)

MCU=stm32l152
CONTIKI_CPU=$(CONTIKI)/cpu/arm/stm32l152
include $(CONTIKI)/cpu/arm/stm32l152/Makefile.stm32l152


MODULES+=core/net \
         core/net/mac core/net/mac/contikimac \
         core/net/llsec


# build rules ------------------------------------

CLEAN += *.stm32nucleo-st7580 symbols.c symbols.h contiki-stm32nucleo-st7580.log 

contiki-$(TARGET).a: ${addprefix $(OBJECTDIR)/,symbols.o}

help:
	@echo A few useful make commands:
	@echo make help - shows this help
	@echo make TARGET=stm32nucleo-st7580 savetarget - stores selection of target to avoid using TARGET= on every make invokation
	@echo make program.upload - compiles and uploads program to connected board
	@echo make program.upload IAR=1 - uses the IAR compiler instead of gcc (not implemented yet)
	@echo make program.upload NODEID=x - uploads with node_id set to x

# Serialdump rules
ifeq ($(HOST_OS),Windows)
  SERIALDUMP = serialdump-windows
  # this ID is a string with which the node identifies itself as, and is used to
  # find the proper /dev/comX-port in Cygwin to connect to.
  CYGWIN_DEV_ID="stm32nucleo-st7580 St7580 Platform"
# include $(CONTIKI)/tools/cygwin/Makefile.cygwin
endif
ifeq ($(HOST_OS),Darwin)
  SERIALDUMP = serialdump-macos
endif
ifndef SERIALDUMP
  # Assume Linux
  SERIALDUMP = serialdump-linux
endif

# IAR/windows/cygwin only for now; after GCC port, see if stm32flash works with Linux
STLINKCLI=ST-LINK_CLI.exe
%.upload: %.hex
	#Note: this command only uploads to a single connected device
	#$(STLINKCLI) -ME || $(STLINKCLI) -ME || $(STLINKCLI) -ME || $(STLINKCLI) -ME
	$(STLINKCLI) -Q -P $*.hex -V -Run


# devcon requires WinDriverKit, downloadable from microsoft.com
DEVCON=devcon.exe
DEVCON_ALLDEVS=$(shell $(DEVCON) find =USB | grep "STMicroelectronics STLink dongle" | cut -d " " -f 1)
devcon_enableonly:
	devcon disable =USB @"USB\VID_0483&PID_3748\*"
	devcon enable =USB @"$(ID)"

%.uploadall: %.hex
	$(foreach D,$(DEVCON_ALLDEVS), echo D IS "$(D)" && make devcon_enableonly ID="$(D)" && make $*.upload && ) echo "Done"
	devcon enable =USB @"USB\VID_0483&PID_3748\*"

login:
	@echo "Connecting to $(COMPORT)"
	$(CONTIKI)/tools/sky/$(SERIALDUMP) -b115200 $(COMPORT)

%.ramusage: %.$(TARGET)
	$(NM) -S $< --size-sort --line-numbers | grep -v " T " | grep -v " t "
%.romusage: %.$(TARGET)
	$(NM) -S $< --size-sort --line-numbers | grep -v " b " | grep -v " B " | grep -v " d " | grep -v " D "




