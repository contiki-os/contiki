.SUFFIXES:

### Optimization setting
ifndef OPTI
OPTI=0
endif

#### Debug settings
DEBUG=-g #-gdwarf-2 -gstrict-dwarf

GDB_PORT ?= 3333

### CPU part number (must have a specific linker script for each part)
# Note that MK60DN256ZVLL10 (version 1.x) and MK60DN256VLL10 (version 2.x, no Z)
# only differ in some register locations etc, not in the actual memory layout,
# so it is safe to use the same linker script for both version 1.x and version
# 2.x silicon.
CPU_PART ?= K60DN256VLL10

### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/k60


### Define the source files

CONTIKI_CPU_DIRS = . drivers

CONTIKI_TARGET_SOURCEFILES += \
  uart.c \
  clock.c \
  core-clocks.c \
  llwu.c \
  onewire.c \
  ds18b20.c


CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions

# Target triple for the build. Use arm-none-eabi if you are unsure.
TARGET_TRIPLE ?= arm-none-eabi


# Toolchain prefix, composed of the path and target triple, you will most likely not need to touch this.
TCPREFIX ?= $(if $(GCCBIN),$(GCCBIN)/)$(if $(TARGET_TRIPLE),$(TARGET_TRIPLE)-)

CC       = $(TCPREFIX)gcc
LD       = $(TCPREFIX)gcc
AS       = $(TCPREFIX)as
AR       = $(TCPREFIX)ar
NM       = $(TCPREFIX)nm
LINKER   = $(TCPREFIX)ld
OBJCOPY  = $(TCPREFIX)objcopy
OBJDUMP  = $(TCPREFIX)objdump
STRIP    = $(TCPREFIX)strip
CFLAGSNO = -I$(CONTIKI_CPU) \
           -I$(CONTIKI)/platform/$(TARGET) \
           ${addprefix -I,$(APPDIRS)} \
           -I. -I$(CONTIKI)/core \
           -Wall -mcpu=cortex-m4
LINKERSCRIPTPATH = $(CONTIKI_CPU)/ldscripts
LINKERSCRIPT = $(CPU_PART).ld
#AROPTS   = rv
CFLAGS   += $(CFLAGSNO)  $(DEBUG) -O$(OPTI) $(OPTFLAGS) -Wall -fno-strict-aliasing -mcpu=cortex-m4 -mthumb -nostartfiles -ffunction-sections -fdata-sections
LDFLAGS  += $(CFLAGS) -Wl,-L$(LINKERSCRIPTPATH) -T $(LINKERSCRIPT) -Wl,-Map=$@.map -Wl,--gc-sections

### Setup directory search path for source files

#CONTIKI_TARGET_DIRS_CONCAT = ${addprefix $(CONTIKI)/platform/$(TARGET)/, \
#                               $(CONTIKI_TARGET_DIRS)}
#
#vpath %.c $(PROJECTDIRS) $(CONTIKI_CPU) \
#	  $(CONTIKIDIRS) $(APPDIRS) $(CONTIKI_TARGET_DIRS_CONCAT)

CPU_STARTC = startup-k60.c interrupt-vector-k60.c
CPU_STARTOBJ=${addprefix $(OBJECTDIR)/,$(CPU_STARTC:.c=.o)}

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

ifeq ($(PORT),)
  PORT=/dev/ttyUSB0
endif

### Compilation rules

CUSTOM_RULE_C_TO_OBJECTDIR_O = 1
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJECTDIR)/startcode.o: startcode.S
	$(AS) -g -mcpu=cortex-m4 -mthumb -o $@ $<

all: bytes
bytes:
	@$(OBJDUMP) -h $(CONTIKI_PROJECT).$(TARGET) | perl -ne '$$b{$$1}=hex $$2 if /^\s*\d+\s*\.(text|data|bss)\s+(\S+)/; END { printf("%16d bytes in ROM\n%16d bytes in RAM\n",$$b{text}+$$b{data},$$b{data}+$$b{bss}); }'

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%.co: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@

%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a $(CPU_STARTOBJ)
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@

#.SECONDARY:

### Upload image
%.u: %.$(TARGET)
	cp $(CONTIKI_CPU)/mulle-arch.gdb /tmp/mulle-arch.gdb
	sed -i 's/target remote :3333/target remote :$(GDB_PORT)/' /tmp/mulle-arch.gdb
	$(GCCBIN)/arm-none-eabi-gdb -x /tmp/mulle-arch.gdb $<

symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h
